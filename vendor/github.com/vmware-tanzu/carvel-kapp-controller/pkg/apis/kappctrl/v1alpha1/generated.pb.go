// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/vmware-tanzu/carvel-kapp-controller/pkg/apis/kappctrl/v1alpha1/generated.proto

package v1alpha1

import (
	fmt "fmt"

	io "io"

	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	k8s_io_api_core_v1 "k8s.io/api/core/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *AppCluster) Reset()      { *m = AppCluster{} }
func (*AppCluster) ProtoMessage() {}
func (*AppCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{0}
}
func (m *AppCluster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppCluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppCluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppCluster.Merge(m, src)
}
func (m *AppCluster) XXX_Size() int {
	return m.Size()
}
func (m *AppCluster) XXX_DiscardUnknown() {
	xxx_messageInfo_AppCluster.DiscardUnknown(m)
}

var xxx_messageInfo_AppCluster proto.InternalMessageInfo

func (m *AppClusterKubeconfigSecretRef) Reset()      { *m = AppClusterKubeconfigSecretRef{} }
func (*AppClusterKubeconfigSecretRef) ProtoMessage() {}
func (*AppClusterKubeconfigSecretRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{1}
}
func (m *AppClusterKubeconfigSecretRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppClusterKubeconfigSecretRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppClusterKubeconfigSecretRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppClusterKubeconfigSecretRef.Merge(m, src)
}
func (m *AppClusterKubeconfigSecretRef) XXX_Size() int {
	return m.Size()
}
func (m *AppClusterKubeconfigSecretRef) XXX_DiscardUnknown() {
	xxx_messageInfo_AppClusterKubeconfigSecretRef.DiscardUnknown(m)
}

var xxx_messageInfo_AppClusterKubeconfigSecretRef proto.InternalMessageInfo

func (m *AppCondition) Reset()      { *m = AppCondition{} }
func (*AppCondition) ProtoMessage() {}
func (*AppCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{2}
}
func (m *AppCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppCondition.Merge(m, src)
}
func (m *AppCondition) XXX_Size() int {
	return m.Size()
}
func (m *AppCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_AppCondition.DiscardUnknown(m)
}

var xxx_messageInfo_AppCondition proto.InternalMessageInfo

func (m *AppDeploy) Reset()      { *m = AppDeploy{} }
func (*AppDeploy) ProtoMessage() {}
func (*AppDeploy) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{3}
}
func (m *AppDeploy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppDeploy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppDeploy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppDeploy.Merge(m, src)
}
func (m *AppDeploy) XXX_Size() int {
	return m.Size()
}
func (m *AppDeploy) XXX_DiscardUnknown() {
	xxx_messageInfo_AppDeploy.DiscardUnknown(m)
}

var xxx_messageInfo_AppDeploy proto.InternalMessageInfo

func (m *AppDeployKapp) Reset()      { *m = AppDeployKapp{} }
func (*AppDeployKapp) ProtoMessage() {}
func (*AppDeployKapp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{4}
}
func (m *AppDeployKapp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppDeployKapp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppDeployKapp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppDeployKapp.Merge(m, src)
}
func (m *AppDeployKapp) XXX_Size() int {
	return m.Size()
}
func (m *AppDeployKapp) XXX_DiscardUnknown() {
	xxx_messageInfo_AppDeployKapp.DiscardUnknown(m)
}

var xxx_messageInfo_AppDeployKapp proto.InternalMessageInfo

func (m *AppDeployKappDelete) Reset()      { *m = AppDeployKappDelete{} }
func (*AppDeployKappDelete) ProtoMessage() {}
func (*AppDeployKappDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{5}
}
func (m *AppDeployKappDelete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppDeployKappDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppDeployKappDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppDeployKappDelete.Merge(m, src)
}
func (m *AppDeployKappDelete) XXX_Size() int {
	return m.Size()
}
func (m *AppDeployKappDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_AppDeployKappDelete.DiscardUnknown(m)
}

var xxx_messageInfo_AppDeployKappDelete proto.InternalMessageInfo

func (m *AppDeployKappInspect) Reset()      { *m = AppDeployKappInspect{} }
func (*AppDeployKappInspect) ProtoMessage() {}
func (*AppDeployKappInspect) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{6}
}
func (m *AppDeployKappInspect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppDeployKappInspect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppDeployKappInspect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppDeployKappInspect.Merge(m, src)
}
func (m *AppDeployKappInspect) XXX_Size() int {
	return m.Size()
}
func (m *AppDeployKappInspect) XXX_DiscardUnknown() {
	xxx_messageInfo_AppDeployKappInspect.DiscardUnknown(m)
}

var xxx_messageInfo_AppDeployKappInspect proto.InternalMessageInfo

func (m *AppFetch) Reset()      { *m = AppFetch{} }
func (*AppFetch) ProtoMessage() {}
func (*AppFetch) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{7}
}
func (m *AppFetch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppFetch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppFetch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppFetch.Merge(m, src)
}
func (m *AppFetch) XXX_Size() int {
	return m.Size()
}
func (m *AppFetch) XXX_DiscardUnknown() {
	xxx_messageInfo_AppFetch.DiscardUnknown(m)
}

var xxx_messageInfo_AppFetch proto.InternalMessageInfo

func (m *AppFetchGit) Reset()      { *m = AppFetchGit{} }
func (*AppFetchGit) ProtoMessage() {}
func (*AppFetchGit) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{8}
}
func (m *AppFetchGit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppFetchGit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppFetchGit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppFetchGit.Merge(m, src)
}
func (m *AppFetchGit) XXX_Size() int {
	return m.Size()
}
func (m *AppFetchGit) XXX_DiscardUnknown() {
	xxx_messageInfo_AppFetchGit.DiscardUnknown(m)
}

var xxx_messageInfo_AppFetchGit proto.InternalMessageInfo

func (m *AppFetchHTTP) Reset()      { *m = AppFetchHTTP{} }
func (*AppFetchHTTP) ProtoMessage() {}
func (*AppFetchHTTP) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{9}
}
func (m *AppFetchHTTP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppFetchHTTP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppFetchHTTP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppFetchHTTP.Merge(m, src)
}
func (m *AppFetchHTTP) XXX_Size() int {
	return m.Size()
}
func (m *AppFetchHTTP) XXX_DiscardUnknown() {
	xxx_messageInfo_AppFetchHTTP.DiscardUnknown(m)
}

var xxx_messageInfo_AppFetchHTTP proto.InternalMessageInfo

func (m *AppFetchHelmChart) Reset()      { *m = AppFetchHelmChart{} }
func (*AppFetchHelmChart) ProtoMessage() {}
func (*AppFetchHelmChart) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{10}
}
func (m *AppFetchHelmChart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppFetchHelmChart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppFetchHelmChart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppFetchHelmChart.Merge(m, src)
}
func (m *AppFetchHelmChart) XXX_Size() int {
	return m.Size()
}
func (m *AppFetchHelmChart) XXX_DiscardUnknown() {
	xxx_messageInfo_AppFetchHelmChart.DiscardUnknown(m)
}

var xxx_messageInfo_AppFetchHelmChart proto.InternalMessageInfo

func (m *AppFetchHelmChartRepo) Reset()      { *m = AppFetchHelmChartRepo{} }
func (*AppFetchHelmChartRepo) ProtoMessage() {}
func (*AppFetchHelmChartRepo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{11}
}
func (m *AppFetchHelmChartRepo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppFetchHelmChartRepo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppFetchHelmChartRepo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppFetchHelmChartRepo.Merge(m, src)
}
func (m *AppFetchHelmChartRepo) XXX_Size() int {
	return m.Size()
}
func (m *AppFetchHelmChartRepo) XXX_DiscardUnknown() {
	xxx_messageInfo_AppFetchHelmChartRepo.DiscardUnknown(m)
}

var xxx_messageInfo_AppFetchHelmChartRepo proto.InternalMessageInfo

func (m *AppFetchImage) Reset()      { *m = AppFetchImage{} }
func (*AppFetchImage) ProtoMessage() {}
func (*AppFetchImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{12}
}
func (m *AppFetchImage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppFetchImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppFetchImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppFetchImage.Merge(m, src)
}
func (m *AppFetchImage) XXX_Size() int {
	return m.Size()
}
func (m *AppFetchImage) XXX_DiscardUnknown() {
	xxx_messageInfo_AppFetchImage.DiscardUnknown(m)
}

var xxx_messageInfo_AppFetchImage proto.InternalMessageInfo

func (m *AppFetchImgpkgBundle) Reset()      { *m = AppFetchImgpkgBundle{} }
func (*AppFetchImgpkgBundle) ProtoMessage() {}
func (*AppFetchImgpkgBundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{13}
}
func (m *AppFetchImgpkgBundle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppFetchImgpkgBundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppFetchImgpkgBundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppFetchImgpkgBundle.Merge(m, src)
}
func (m *AppFetchImgpkgBundle) XXX_Size() int {
	return m.Size()
}
func (m *AppFetchImgpkgBundle) XXX_DiscardUnknown() {
	xxx_messageInfo_AppFetchImgpkgBundle.DiscardUnknown(m)
}

var xxx_messageInfo_AppFetchImgpkgBundle proto.InternalMessageInfo

func (m *AppFetchInline) Reset()      { *m = AppFetchInline{} }
func (*AppFetchInline) ProtoMessage() {}
func (*AppFetchInline) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{14}
}
func (m *AppFetchInline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppFetchInline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppFetchInline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppFetchInline.Merge(m, src)
}
func (m *AppFetchInline) XXX_Size() int {
	return m.Size()
}
func (m *AppFetchInline) XXX_DiscardUnknown() {
	xxx_messageInfo_AppFetchInline.DiscardUnknown(m)
}

var xxx_messageInfo_AppFetchInline proto.InternalMessageInfo

func (m *AppFetchInlineSource) Reset()      { *m = AppFetchInlineSource{} }
func (*AppFetchInlineSource) ProtoMessage() {}
func (*AppFetchInlineSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{15}
}
func (m *AppFetchInlineSource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppFetchInlineSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppFetchInlineSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppFetchInlineSource.Merge(m, src)
}
func (m *AppFetchInlineSource) XXX_Size() int {
	return m.Size()
}
func (m *AppFetchInlineSource) XXX_DiscardUnknown() {
	xxx_messageInfo_AppFetchInlineSource.DiscardUnknown(m)
}

var xxx_messageInfo_AppFetchInlineSource proto.InternalMessageInfo

func (m *AppFetchInlineSourceRef) Reset()      { *m = AppFetchInlineSourceRef{} }
func (*AppFetchInlineSourceRef) ProtoMessage() {}
func (*AppFetchInlineSourceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{16}
}
func (m *AppFetchInlineSourceRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppFetchInlineSourceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppFetchInlineSourceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppFetchInlineSourceRef.Merge(m, src)
}
func (m *AppFetchInlineSourceRef) XXX_Size() int {
	return m.Size()
}
func (m *AppFetchInlineSourceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_AppFetchInlineSourceRef.DiscardUnknown(m)
}

var xxx_messageInfo_AppFetchInlineSourceRef proto.InternalMessageInfo

func (m *AppFetchLocalRef) Reset()      { *m = AppFetchLocalRef{} }
func (*AppFetchLocalRef) ProtoMessage() {}
func (*AppFetchLocalRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{17}
}
func (m *AppFetchLocalRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppFetchLocalRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppFetchLocalRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppFetchLocalRef.Merge(m, src)
}
func (m *AppFetchLocalRef) XXX_Size() int {
	return m.Size()
}
func (m *AppFetchLocalRef) XXX_DiscardUnknown() {
	xxx_messageInfo_AppFetchLocalRef.DiscardUnknown(m)
}

var xxx_messageInfo_AppFetchLocalRef proto.InternalMessageInfo

func (m *AppSpec) Reset()      { *m = AppSpec{} }
func (*AppSpec) ProtoMessage() {}
func (*AppSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{18}
}
func (m *AppSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppSpec.Merge(m, src)
}
func (m *AppSpec) XXX_Size() int {
	return m.Size()
}
func (m *AppSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_AppSpec.DiscardUnknown(m)
}

var xxx_messageInfo_AppSpec proto.InternalMessageInfo

func (m *AppTemplate) Reset()      { *m = AppTemplate{} }
func (*AppTemplate) ProtoMessage() {}
func (*AppTemplate) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{19}
}
func (m *AppTemplate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppTemplate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppTemplate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppTemplate.Merge(m, src)
}
func (m *AppTemplate) XXX_Size() int {
	return m.Size()
}
func (m *AppTemplate) XXX_DiscardUnknown() {
	xxx_messageInfo_AppTemplate.DiscardUnknown(m)
}

var xxx_messageInfo_AppTemplate proto.InternalMessageInfo

func (m *AppTemplateHelmTemplate) Reset()      { *m = AppTemplateHelmTemplate{} }
func (*AppTemplateHelmTemplate) ProtoMessage() {}
func (*AppTemplateHelmTemplate) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{20}
}
func (m *AppTemplateHelmTemplate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppTemplateHelmTemplate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppTemplateHelmTemplate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppTemplateHelmTemplate.Merge(m, src)
}
func (m *AppTemplateHelmTemplate) XXX_Size() int {
	return m.Size()
}
func (m *AppTemplateHelmTemplate) XXX_DiscardUnknown() {
	xxx_messageInfo_AppTemplateHelmTemplate.DiscardUnknown(m)
}

var xxx_messageInfo_AppTemplateHelmTemplate proto.InternalMessageInfo

func (m *AppTemplateJsonnet) Reset()      { *m = AppTemplateJsonnet{} }
func (*AppTemplateJsonnet) ProtoMessage() {}
func (*AppTemplateJsonnet) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{21}
}
func (m *AppTemplateJsonnet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppTemplateJsonnet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppTemplateJsonnet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppTemplateJsonnet.Merge(m, src)
}
func (m *AppTemplateJsonnet) XXX_Size() int {
	return m.Size()
}
func (m *AppTemplateJsonnet) XXX_DiscardUnknown() {
	xxx_messageInfo_AppTemplateJsonnet.DiscardUnknown(m)
}

var xxx_messageInfo_AppTemplateJsonnet proto.InternalMessageInfo

func (m *AppTemplateKbld) Reset()      { *m = AppTemplateKbld{} }
func (*AppTemplateKbld) ProtoMessage() {}
func (*AppTemplateKbld) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{22}
}
func (m *AppTemplateKbld) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppTemplateKbld) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppTemplateKbld) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppTemplateKbld.Merge(m, src)
}
func (m *AppTemplateKbld) XXX_Size() int {
	return m.Size()
}
func (m *AppTemplateKbld) XXX_DiscardUnknown() {
	xxx_messageInfo_AppTemplateKbld.DiscardUnknown(m)
}

var xxx_messageInfo_AppTemplateKbld proto.InternalMessageInfo

func (m *AppTemplateKustomize) Reset()      { *m = AppTemplateKustomize{} }
func (*AppTemplateKustomize) ProtoMessage() {}
func (*AppTemplateKustomize) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{23}
}
func (m *AppTemplateKustomize) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppTemplateKustomize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppTemplateKustomize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppTemplateKustomize.Merge(m, src)
}
func (m *AppTemplateKustomize) XXX_Size() int {
	return m.Size()
}
func (m *AppTemplateKustomize) XXX_DiscardUnknown() {
	xxx_messageInfo_AppTemplateKustomize.DiscardUnknown(m)
}

var xxx_messageInfo_AppTemplateKustomize proto.InternalMessageInfo

func (m *AppTemplateSops) Reset()      { *m = AppTemplateSops{} }
func (*AppTemplateSops) ProtoMessage() {}
func (*AppTemplateSops) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{24}
}
func (m *AppTemplateSops) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppTemplateSops) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppTemplateSops) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppTemplateSops.Merge(m, src)
}
func (m *AppTemplateSops) XXX_Size() int {
	return m.Size()
}
func (m *AppTemplateSops) XXX_DiscardUnknown() {
	xxx_messageInfo_AppTemplateSops.DiscardUnknown(m)
}

var xxx_messageInfo_AppTemplateSops proto.InternalMessageInfo

func (m *AppTemplateSopsPGP) Reset()      { *m = AppTemplateSopsPGP{} }
func (*AppTemplateSopsPGP) ProtoMessage() {}
func (*AppTemplateSopsPGP) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{25}
}
func (m *AppTemplateSopsPGP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppTemplateSopsPGP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppTemplateSopsPGP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppTemplateSopsPGP.Merge(m, src)
}
func (m *AppTemplateSopsPGP) XXX_Size() int {
	return m.Size()
}
func (m *AppTemplateSopsPGP) XXX_DiscardUnknown() {
	xxx_messageInfo_AppTemplateSopsPGP.DiscardUnknown(m)
}

var xxx_messageInfo_AppTemplateSopsPGP proto.InternalMessageInfo

func (m *AppTemplateSopsPGPPrivateKeysSecretRef) Reset() {
	*m = AppTemplateSopsPGPPrivateKeysSecretRef{}
}
func (*AppTemplateSopsPGPPrivateKeysSecretRef) ProtoMessage() {}
func (*AppTemplateSopsPGPPrivateKeysSecretRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{26}
}
func (m *AppTemplateSopsPGPPrivateKeysSecretRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppTemplateSopsPGPPrivateKeysSecretRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppTemplateSopsPGPPrivateKeysSecretRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppTemplateSopsPGPPrivateKeysSecretRef.Merge(m, src)
}
func (m *AppTemplateSopsPGPPrivateKeysSecretRef) XXX_Size() int {
	return m.Size()
}
func (m *AppTemplateSopsPGPPrivateKeysSecretRef) XXX_DiscardUnknown() {
	xxx_messageInfo_AppTemplateSopsPGPPrivateKeysSecretRef.DiscardUnknown(m)
}

var xxx_messageInfo_AppTemplateSopsPGPPrivateKeysSecretRef proto.InternalMessageInfo

func (m *AppTemplateValuesSource) Reset()      { *m = AppTemplateValuesSource{} }
func (*AppTemplateValuesSource) ProtoMessage() {}
func (*AppTemplateValuesSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{27}
}
func (m *AppTemplateValuesSource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppTemplateValuesSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppTemplateValuesSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppTemplateValuesSource.Merge(m, src)
}
func (m *AppTemplateValuesSource) XXX_Size() int {
	return m.Size()
}
func (m *AppTemplateValuesSource) XXX_DiscardUnknown() {
	xxx_messageInfo_AppTemplateValuesSource.DiscardUnknown(m)
}

var xxx_messageInfo_AppTemplateValuesSource proto.InternalMessageInfo

func (m *AppTemplateValuesSourceRef) Reset()      { *m = AppTemplateValuesSourceRef{} }
func (*AppTemplateValuesSourceRef) ProtoMessage() {}
func (*AppTemplateValuesSourceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{28}
}
func (m *AppTemplateValuesSourceRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppTemplateValuesSourceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppTemplateValuesSourceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppTemplateValuesSourceRef.Merge(m, src)
}
func (m *AppTemplateValuesSourceRef) XXX_Size() int {
	return m.Size()
}
func (m *AppTemplateValuesSourceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_AppTemplateValuesSourceRef.DiscardUnknown(m)
}

var xxx_messageInfo_AppTemplateValuesSourceRef proto.InternalMessageInfo

func (m *AppTemplateYtt) Reset()      { *m = AppTemplateYtt{} }
func (*AppTemplateYtt) ProtoMessage() {}
func (*AppTemplateYtt) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{29}
}
func (m *AppTemplateYtt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppTemplateYtt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppTemplateYtt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppTemplateYtt.Merge(m, src)
}
func (m *AppTemplateYtt) XXX_Size() int {
	return m.Size()
}
func (m *AppTemplateYtt) XXX_DiscardUnknown() {
	xxx_messageInfo_AppTemplateYtt.DiscardUnknown(m)
}

var xxx_messageInfo_AppTemplateYtt proto.InternalMessageInfo

func (m *GenericStatus) Reset()      { *m = GenericStatus{} }
func (*GenericStatus) ProtoMessage() {}
func (*GenericStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972ccf085273df7, []int{30}
}
func (m *GenericStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenericStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GenericStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericStatus.Merge(m, src)
}
func (m *GenericStatus) XXX_Size() int {
	return m.Size()
}
func (m *GenericStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericStatus.DiscardUnknown(m)
}

var xxx_messageInfo_GenericStatus proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AppCluster)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppCluster")
	proto.RegisterType((*AppClusterKubeconfigSecretRef)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppClusterKubeconfigSecretRef")
	proto.RegisterType((*AppCondition)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppCondition")
	proto.RegisterType((*AppDeploy)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppDeploy")
	proto.RegisterType((*AppDeployKapp)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppDeployKapp")
	proto.RegisterType((*AppDeployKappDelete)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppDeployKappDelete")
	proto.RegisterType((*AppDeployKappInspect)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppDeployKappInspect")
	proto.RegisterType((*AppFetch)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppFetch")
	proto.RegisterType((*AppFetchGit)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppFetchGit")
	proto.RegisterType((*AppFetchHTTP)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppFetchHTTP")
	proto.RegisterType((*AppFetchHelmChart)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppFetchHelmChart")
	proto.RegisterType((*AppFetchHelmChartRepo)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppFetchHelmChartRepo")
	proto.RegisterType((*AppFetchImage)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppFetchImage")
	proto.RegisterType((*AppFetchImgpkgBundle)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppFetchImgpkgBundle")
	proto.RegisterType((*AppFetchInline)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppFetchInline")
	proto.RegisterMapType((map[string]string)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppFetchInline.PathsEntry")
	proto.RegisterType((*AppFetchInlineSource)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppFetchInlineSource")
	proto.RegisterType((*AppFetchInlineSourceRef)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppFetchInlineSourceRef")
	proto.RegisterType((*AppFetchLocalRef)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppFetchLocalRef")
	proto.RegisterType((*AppSpec)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppSpec")
	proto.RegisterType((*AppTemplate)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppTemplate")
	proto.RegisterType((*AppTemplateHelmTemplate)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppTemplateHelmTemplate")
	proto.RegisterType((*AppTemplateJsonnet)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppTemplateJsonnet")
	proto.RegisterType((*AppTemplateKbld)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppTemplateKbld")
	proto.RegisterType((*AppTemplateKustomize)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppTemplateKustomize")
	proto.RegisterType((*AppTemplateSops)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppTemplateSops")
	proto.RegisterType((*AppTemplateSopsPGP)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppTemplateSopsPGP")
	proto.RegisterType((*AppTemplateSopsPGPPrivateKeysSecretRef)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppTemplateSopsPGPPrivateKeysSecretRef")
	proto.RegisterType((*AppTemplateValuesSource)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppTemplateValuesSource")
	proto.RegisterType((*AppTemplateValuesSourceRef)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppTemplateValuesSourceRef")
	proto.RegisterType((*AppTemplateYtt)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.AppTemplateYtt")
	proto.RegisterType((*GenericStatus)(nil), "github.com.vmware_tanzu.carvel_kapp_controller.pkg.apis.kappctrl.v1alpha1.GenericStatus")
}

func init() {
	proto.RegisterFile("github.com/vmware-tanzu/carvel-kapp-controller/pkg/apis/kappctrl/v1alpha1/generated.proto", fileDescriptor_e972ccf085273df7)
}

var fileDescriptor_e972ccf085273df7 = []byte{
	// 2107 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x59, 0xcd, 0x6f, 0x1b, 0xc7,
	0x15, 0xf7, 0x92, 0x14, 0x45, 0x3e, 0x59, 0x8e, 0x33, 0x92, 0x1b, 0x42, 0x85, 0x45, 0x61, 0x0b,
	0x18, 0x0e, 0x5a, 0x2f, 0x61, 0xc2, 0x31, 0x8c, 0x16, 0x28, 0x20, 0x4a, 0x96, 0x2c, 0xdb, 0x52,
	0x88, 0xa1, 0xec, 0xd6, 0x69, 0x13, 0x67, 0xb9, 0x1c, 0x91, 0x5b, 0x2e, 0x77, 0x27, 0xbb, 0xb3,
	0xb4, 0x19, 0xa4, 0x40, 0xd1, 0x06, 0x45, 0x8b, 0x14, 0x68, 0x10, 0xa0, 0x41, 0x81, 0xfe, 0x01,
	0xed, 0xa1, 0xb7, 0x5e, 0x8b, 0x16, 0x45, 0x81, 0xc2, 0xc7, 0x9c, 0x8a, 0x9c, 0x84, 0x9a, 0x6d,
	0x0f, 0xbd, 0xf4, 0x92, 0x5b, 0x4e, 0xc5, 0x7c, 0xec, 0x07, 0x45, 0xda, 0x52, 0x01, 0x6d, 0x3e,
	0x6e, 0xbb, 0x6f, 0xde, 0xbc, 0xdf, 0x9b, 0x37, 0x6f, 0xde, 0xc7, 0x0c, 0x3c, 0xe8, 0xda, 0xac,
	0x17, 0xb6, 0x0d, 0xcb, 0x1b, 0xd4, 0x86, 0x83, 0x47, 0xa6, 0x4f, 0xae, 0x30, 0xd3, 0x7d, 0x3b,
	0xac, 0x59, 0xa6, 0x3f, 0x24, 0xce, 0x95, 0xbe, 0x49, 0xe9, 0x15, 0xcb, 0x73, 0x99, 0xef, 0x39,
	0x0e, 0xf1, 0x6b, 0xb4, 0xdf, 0xad, 0x99, 0xd4, 0x0e, 0x6a, 0x7c, 0xc0, 0x62, 0xbe, 0x53, 0x1b,
	0x5e, 0x35, 0x1d, 0xda, 0x33, 0xaf, 0xd6, 0xba, 0xc4, 0x25, 0xbe, 0xc9, 0x48, 0xc7, 0xa0, 0xbe,
	0xc7, 0x3c, 0xb4, 0x93, 0x88, 0x36, 0xa4, 0xe8, 0x87, 0x42, 0xb4, 0x21, 0x45, 0x3f, 0xe4, 0x12,
	0x1e, 0x26, 0xa2, 0x0d, 0xda, 0xef, 0x1a, 0x5c, 0xb4, 0x11, 0x89, 0x36, 0x22, 0xd1, 0x2b, 0x57,
	0x52, 0x5a, 0x76, 0xbd, 0xae, 0x57, 0x13, 0x08, 0xed, 0xf0, 0x40, 0xfc, 0x89, 0x1f, 0xf1, 0x25,
	0x91, 0x57, 0xae, 0xf5, 0x6f, 0x04, 0x86, 0xed, 0x71, 0x45, 0x07, 0xa6, 0xd5, 0xb3, 0x5d, 0xe2,
	0x8f, 0x12, 0xcd, 0x07, 0x84, 0x99, 0xb5, 0xe1, 0x94, 0xbe, 0x2b, 0xb5, 0x67, 0xcd, 0xf2, 0x43,
	0x97, 0xd9, 0x03, 0x32, 0x35, 0xe1, 0xfa, 0x71, 0x13, 0x02, 0xab, 0x47, 0x06, 0xe6, 0xd1, 0x79,
	0xfa, 0x27, 0x1a, 0xc0, 0x3a, 0xa5, 0x1b, 0x4e, 0x18, 0x30, 0xe2, 0xa3, 0x1a, 0x94, 0x5d, 0x73,
	0x40, 0x02, 0x6a, 0x5a, 0xa4, 0xa2, 0xad, 0x69, 0x97, 0xcb, 0x8d, 0x17, 0x9f, 0x1c, 0x56, 0xcf,
	0x8c, 0x0f, 0xab, 0xe5, 0xbd, 0x68, 0x00, 0x27, 0x3c, 0xe8, 0x0f, 0x1a, 0x2c, 0xf5, 0xc3, 0x36,
	0xb1, 0x3c, 0xf7, 0xc0, 0xee, 0xb6, 0x88, 0xe5, 0x13, 0x86, 0xc9, 0x41, 0x25, 0xb7, 0xa6, 0x5d,
	0x5e, 0xa8, 0xf7, 0x8c, 0x53, 0xb3, 0xbb, 0x91, 0x68, 0x79, 0x67, 0x1a, 0xaf, 0xf1, 0xd2, 0xf8,
	0xb0, 0xba, 0x34, 0x63, 0x00, 0xcf, 0xd2, 0x4e, 0x7f, 0x13, 0x2e, 0x3e, 0x57, 0x1c, 0x5a, 0x83,
	0x02, 0x5f, 0xa3, 0x32, 0xc1, 0x59, 0x65, 0x82, 0x02, 0x37, 0x01, 0x16, 0x23, 0xe8, 0x22, 0xe4,
	0xfb, 0x64, 0x24, 0xd6, 0x59, 0x6e, 0x2c, 0x28, 0x86, 0xfc, 0x1d, 0x32, 0xc2, 0x9c, 0xae, 0xff,
	0x5b, 0x83, 0xb3, 0x1c, 0xc2, 0x73, 0x3b, 0x36, 0xb3, 0x3d, 0x17, 0x5d, 0x83, 0x02, 0x1b, 0xd1,
	0x48, 0xe2, 0x5a, 0x24, 0x71, 0x7f, 0x44, 0xc9, 0xa7, 0x87, 0xd5, 0xf3, 0x69, 0x5e, 0x4e, 0xc3,
	0x82, 0x1b, 0xdd, 0x85, 0x62, 0xc0, 0x4c, 0x16, 0x06, 0x0a, 0xe8, 0x9a, 0x9a, 0x57, 0x6c, 0x09,
	0xea, 0xa7, 0x87, 0x55, 0x3d, 0xd9, 0xf8, 0x9a, 0xe5, 0xf9, 0xa4, 0x36, 0xbc, 0x6a, 0xc4, 0x92,
	0x24, 0x17, 0x56, 0x32, 0xd0, 0x25, 0x28, 0xfa, 0xc4, 0x0c, 0x3c, 0xb7, 0x92, 0x17, 0xd2, 0xce,
	0x45, 0xd2, 0xb0, 0xa0, 0x62, 0x35, 0x8a, 0x5e, 0x86, 0xf9, 0x01, 0x09, 0x02, 0xb3, 0x4b, 0x2a,
	0x05, 0xc1, 0xf8, 0x82, 0x62, 0x9c, 0xdf, 0x95, 0x64, 0x1c, 0x8d, 0xeb, 0x3f, 0xd1, 0xa0, 0xbc,
	0x4e, 0xe9, 0x26, 0xa1, 0x8e, 0x37, 0x42, 0x43, 0x28, 0xf0, 0x8d, 0x13, 0x8b, 0x5c, 0xa8, 0x7f,
	0xf7, 0x74, 0x77, 0x5f, 0x62, 0xdc, 0x31, 0x29, 0x6d, 0x94, 0xb8, 0xe9, 0xf8, 0x17, 0x16, 0x78,
	0xfa, 0x87, 0x79, 0x58, 0x9c, 0xe0, 0xe0, 0x4b, 0xb5, 0x5d, 0xe6, 0xed, 0x05, 0xca, 0xe0, 0xf1,
	0x52, 0x77, 0x04, 0x15, 0xab, 0x51, 0x54, 0x85, 0xb9, 0x81, 0x49, 0xf7, 0xb8, 0x7d, 0xf3, 0x97,
	0xcb, 0x8d, 0xf2, 0xf8, 0xb0, 0x3a, 0xb7, 0xcb, 0x09, 0x58, 0xd2, 0x91, 0x01, 0xe0, 0x9b, 0x8f,
	0x5e, 0xa5, 0xdc, 0x9c, 0x41, 0x25, 0x2f, 0xb8, 0xce, 0x8d, 0x0f, 0xab, 0x80, 0x63, 0x2a, 0x4e,
	0x71, 0xa0, 0x9f, 0x6a, 0x30, 0x6f, 0xbb, 0x01, 0x25, 0x16, 0x13, 0xc6, 0x5b, 0xa8, 0x3f, 0xcc,
	0xca, 0x0c, 0x3b, 0x12, 0xa6, 0xb1, 0xc0, 0x77, 0x46, 0xfd, 0xe0, 0x08, 0x1c, 0xfd, 0x58, 0x83,
	0x62, 0x87, 0x38, 0x84, 0x91, 0xca, 0x9c, 0xd0, 0xe3, 0x8d, 0xac, 0xf4, 0xd8, 0x14, 0x28, 0x0d,
	0xe0, 0xe6, 0x95, 0xdf, 0x58, 0x21, 0xeb, 0x37, 0x61, 0x69, 0x06, 0xeb, 0x11, 0xa3, 0x6a, 0xc7,
	0x19, 0x55, 0xdf, 0x82, 0xe5, 0x59, 0x2b, 0xff, 0xbf, 0xe5, 0x7c, 0x50, 0x84, 0xd2, 0x3a, 0xa5,
	0x5b, 0x84, 0x59, 0x3d, 0xf4, 0x43, 0xee, 0x22, 0x8e, 0xed, 0x12, 0xe5, 0xae, 0x0f, 0x4e, 0xd7,
	0x3e, 0x02, 0x64, 0x47, 0x00, 0x48, 0xd3, 0xc8, 0x6f, 0xac, 0x40, 0xd1, 0x08, 0xe6, 0xec, 0x01,
	0x3f, 0x62, 0xb9, 0x2c, 0x0e, 0x8b, 0x44, 0xe7, 0xf2, 0xa5, 0x4f, 0x8b, 0x4f, 0x2c, 0x11, 0x51,
	0x08, 0x85, 0x1e, 0x63, 0x54, 0x44, 0x81, 0x85, 0xfa, 0x77, 0x32, 0x40, 0xbe, 0xb5, 0xbf, 0xdf,
	0x94, 0xa7, 0x94, 0x7f, 0x61, 0x01, 0x87, 0xde, 0x82, 0x7c, 0xd7, 0x8e, 0x4e, 0xc5, 0xfd, 0x0c,
	0x50, 0xb7, 0x6d, 0xd6, 0x98, 0xe7, 0x61, 0x78, 0xdb, 0x66, 0x98, 0x63, 0xa1, 0x9f, 0x6b, 0x50,
	0xee, 0x11, 0x67, 0xb0, 0xd1, 0x33, 0x7d, 0xa6, 0xce, 0xc1, 0xf7, 0xb3, 0x58, 0x6f, 0x84, 0xd1,
	0x58, 0xe4, 0xa9, 0x32, 0xfe, 0xc5, 0x09, 0x3a, 0xfa, 0x95, 0x06, 0x67, 0xed, 0x41, 0x97, 0xf6,
	0xbb, 0x8d, 0xd0, 0xed, 0x38, 0xa4, 0x52, 0xcc, 0x22, 0x3c, 0xa8, 0x8d, 0x4f, 0x60, 0x1a, 0xe7,
	0xc7, 0x87, 0xd5, 0xb3, 0x69, 0x0a, 0x9e, 0x50, 0x43, 0xff, 0x53, 0x0e, 0x16, 0x52, 0x16, 0xe4,
	0x99, 0x2d, 0xf4, 0x1d, 0x15, 0x37, 0xe3, 0xcc, 0x76, 0x0f, 0xdf, 0xc5, 0x9c, 0xce, 0x87, 0x7d,
	0x95, 0xe0, 0x53, 0xc3, 0x3c, 0xd5, 0x72, 0x3a, 0xfa, 0x99, 0x06, 0xe5, 0x20, 0x2e, 0x03, 0xa4,
	0x87, 0x7d, 0x2f, 0x83, 0x25, 0xde, 0xf5, 0x2c, 0xd3, 0xe1, 0x99, 0x5f, 0x18, 0x3c, 0xc9, 0xf7,
	0x09, 0x38, 0x4f, 0x63, 0x41, 0xd8, 0x6e, 0x9a, 0xac, 0x77, 0x34, 0x8d, 0xb5, 0x24, 0x19, 0x47,
	0xe3, 0xe8, 0x5b, 0xb0, 0xe8, 0x1c, 0x04, 0xad, 0xbe, 0x4d, 0x5b, 0x83, 0xb0, 0xd3, 0x95, 0x21,
	0xb3, 0xd4, 0xb8, 0xa0, 0x26, 0x2c, 0xde, 0xdd, 0x6a, 0x25, 0x83, 0x78, 0x92, 0x57, 0x7f, 0x2f,
	0x27, 0x72, 0x7d, 0xec, 0xf8, 0xc7, 0x59, 0xf0, 0x12, 0x14, 0x83, 0x9e, 0x59, 0x7f, 0xe5, 0xba,
	0x32, 0x62, 0x9c, 0x9b, 0x5a, 0xb7, 0xd6, 0xeb, 0xaf, 0x5c, 0xc7, 0x6a, 0xf4, 0xcb, 0x69, 0x4a,
	0x5e, 0x51, 0xbe, 0x38, 0x75, 0x2c, 0x4e, 0x50, 0x50, 0xbd, 0x0c, 0xf3, 0x43, 0xe2, 0x07, 0xb6,
	0xe7, 0x2a, 0xb3, 0xc4, 0x10, 0xf7, 0x25, 0x19, 0x47, 0xe3, 0xe8, 0x7d, 0x0d, 0xc0, 0x27, 0xd4,
	0x0b, 0x6c, 0xe6, 0xf9, 0x23, 0x65, 0x99, 0x37, 0xb3, 0x3c, 0xd6, 0x98, 0x50, 0x4f, 0x65, 0x96,
	0x18, 0x17, 0xa7, 0x74, 0xd0, 0xff, 0xa2, 0xc1, 0x85, 0x99, 0xb3, 0x8e, 0x73, 0x86, 0xc9, 0x4d,
	0xce, 0x7d, 0x8e, 0x9b, 0xac, 0xff, 0x4b, 0x13, 0x55, 0x54, 0x92, 0x3a, 0xbe, 0x3c, 0xba, 0xa7,
	0x1d, 0x34, 0x7f, 0x8c, 0x83, 0xfe, 0x4d, 0x13, 0xd5, 0xc4, 0x54, 0xa0, 0x44, 0x5f, 0x8b, 0x32,
	0xb2, 0x5c, 0xef, 0xa2, 0x92, 0x30, 0x99, 0x3b, 0xbf, 0x40, 0xfb, 0xf5, 0x9f, 0x1c, 0x9c, 0x9b,
	0x2c, 0x34, 0x78, 0xbe, 0x9b, 0xa3, 0x26, 0xeb, 0xc9, 0x62, 0x68, 0xa1, 0xde, 0xc9, 0xac, 0xa6,
	0x31, 0xb8, 0x2d, 0x83, 0x9b, 0x2e, 0xf3, 0x47, 0x89, 0xa5, 0x04, 0x0d, 0x4b, 0x0d, 0xf8, 0x29,
	0x2d, 0x8b, 0xaf, 0x2d, 0xdf, 0x1b, 0x88, 0xfa, 0x3a, 0xa3, 0x64, 0x27, 0xf4, 0x69, 0x79, 0xa1,
	0x6f, 0x91, 0xa4, 0x5b, 0x6d, 0x46, 0xc8, 0x38, 0x51, 0x62, 0xe5, 0x06, 0x40, 0xa2, 0x36, 0x3a,
	0x2f, 0x5b, 0x38, 0xb1, 0xdb, 0xa2, 0x6b, 0x43, 0xcb, 0x30, 0x37, 0x34, 0x9d, 0x50, 0xd6, 0x64,
	0x65, 0x2c, 0x7f, 0xbe, 0x99, 0xbb, 0xa1, 0xe9, 0x7f, 0xcd, 0xa5, 0x9c, 0x26, 0x05, 0x88, 0x7e,
	0x39, 0xe1, 0x0f, 0xb2, 0x92, 0x6c, 0x67, 0xbc, 0xca, 0xe7, 0x1f, 0x85, 0x5f, 0x6b, 0x70, 0x56,
	0xf6, 0xb3, 0xbb, 0x26, 0x4d, 0x9c, 0xf4, 0xb3, 0x50, 0x4a, 0x94, 0x1a, 0x1b, 0x29, 0x6c, 0x3c,
	0xa1, 0x89, 0xfe, 0x18, 0x5e, 0x7a, 0xc6, 0x54, 0x9e, 0x81, 0x3b, 0xb6, 0x4f, 0x2c, 0x1e, 0x4d,
	0xc5, 0x31, 0x96, 0x49, 0x20, 0xce, 0xc0, 0x9b, 0xe9, 0x41, 0x3c, 0xc9, 0x7b, 0x7c, 0x76, 0xd1,
	0xaf, 0xc1, 0xf9, 0xa3, 0x27, 0xeb, 0x04, 0xb3, 0xfe, 0x58, 0x84, 0xf9, 0x75, 0x4a, 0x5b, 0x94,
	0x58, 0xe8, 0x36, 0xa0, 0x80, 0xf8, 0x43, 0xdb, 0x22, 0xeb, 0x96, 0xe5, 0x85, 0x2e, 0xdb, 0x4b,
	0xe6, 0xae, 0xa8, 0xb9, 0xa8, 0x35, 0xc5, 0x81, 0x67, 0xcc, 0x42, 0xef, 0xc0, 0xbc, 0x25, 0x2f,
	0x1f, 0xd4, 0xe6, 0xdc, 0xcb, 0xe4, 0xa2, 0x44, 0x76, 0x86, 0xea, 0x07, 0x47, 0x90, 0xe8, 0x31,
	0xcc, 0x1d, 0x70, 0x43, 0x88, 0x6e, 0x76, 0xa1, 0xde, 0xca, 0xc0, 0x31, 0x92, 0x90, 0x20, 0x7e,
	0xb1, 0x04, 0x44, 0xef, 0x6a, 0x50, 0x62, 0x64, 0x40, 0x1d, 0x93, 0x91, 0x4a, 0x41, 0xa0, 0x9f,
	0x72, 0x1f, 0xb0, 0xaf, 0xa4, 0x37, 0xce, 0x2b, 0x05, 0x4a, 0x11, 0x05, 0xc7, 0xc8, 0xe8, 0x1d,
	0xde, 0x19, 0xf3, 0x5e, 0xb2, 0x32, 0x27, 0x74, 0xd8, 0xcf, 0xa2, 0x33, 0x4e, 0xca, 0x3a, 0xf9,
	0x8f, 0x15, 0x26, 0x2f, 0xff, 0xa8, 0x19, 0x06, 0xa4, 0x23, 0x1a, 0x80, 0x52, 0xc2, 0xd7, 0x14,
	0x54, 0xac, 0x46, 0xd1, 0x37, 0xa0, 0x64, 0x99, 0xae, 0x45, 0x1c, 0xd2, 0xa9, 0xcc, 0x0b, 0xce,
	0x78, 0x4d, 0x1b, 0x8a, 0x8e, 0x63, 0x0e, 0xf4, 0x06, 0x40, 0x30, 0x72, 0xad, 0x26, 0xf1, 0x6d,
	0xaf, 0x53, 0x29, 0x09, 0xaf, 0x32, 0x0c, 0x79, 0x39, 0x64, 0xa4, 0x6f, 0x05, 0x13, 0xe5, 0x07,
	0x84, 0x99, 0xc6, 0xf0, 0xaa, 0xb1, 0x19, 0xfa, 0x26, 0xef, 0x8f, 0x65, 0x81, 0xd3, 0x8a, 0xa5,
	0xe0, 0x94, 0x44, 0x54, 0x07, 0x70, 0x3d, 0x4f, 0x35, 0xf0, 0x95, 0xb2, 0xd0, 0x07, 0x29, 0x7d,
	0x60, 0x2f, 0x1e, 0xc1, 0x29, 0x2e, 0xfd, 0x77, 0x45, 0xd1, 0x59, 0x44, 0x3b, 0x80, 0x18, 0xe4,
	0x47, 0x8c, 0x65, 0xd3, 0x6e, 0x47, 0x20, 0x0f, 0x98, 0xea, 0x01, 0x1f, 0x30, 0x86, 0x39, 0x1c,
	0x7a, 0x0c, 0x85, 0x7e, 0xdb, 0xe9, 0xa8, 0x93, 0xf6, 0x5a, 0x36, 0xb0, 0x77, 0xda, 0x4e, 0x47,
	0x5d, 0x4b, 0xb5, 0x9d, 0x0e, 0x16, 0x88, 0x22, 0x12, 0xf3, 0xfe, 0x2f, 0x62, 0x52, 0x95, 0x6a,
	0x3b, 0x1b, 0x15, 0x6e, 0xa5, 0x90, 0x64, 0x24, 0x4e, 0x53, 0xf0, 0x84, 0x26, 0xe8, 0x17, 0x1a,
	0x94, 0xfb, 0x61, 0xc0, 0xbc, 0x81, 0xfd, 0x36, 0xc9, 0xe6, 0xa2, 0x2a, 0x36, 0x4d, 0x04, 0x23,
	0x73, 0x56, 0xfc, 0x8b, 0x13, 0x05, 0x78, 0x60, 0x98, 0xff, 0x41, 0xe0, 0xb9, 0x2e, 0x89, 0xba,
	0xf4, 0xd7, 0xb3, 0x51, 0xe6, 0xb6, 0x04, 0x91, 0x91, 0x51, 0xfd, 0xe0, 0x08, 0x9a, 0xbb, 0x4a,
	0xe0, 0xd1, 0x40, 0x75, 0xe6, 0x19, 0xb9, 0x4a, 0xcb, 0xa3, 0x81, 0x74, 0x15, 0xfe, 0x85, 0x05,
	0xa2, 0xfe, 0xdb, 0x9c, 0x48, 0x8d, 0xb3, 0xf6, 0xf2, 0x04, 0xbd, 0xd3, 0xc4, 0xb5, 0x7d, 0xee,
	0x04, 0xd7, 0xf6, 0x6b, 0x50, 0xa0, 0x49, 0xad, 0x1c, 0x8b, 0x14, 0xb9, 0x55, 0x8c, 0xa0, 0x0f,
	0x35, 0x00, 0x51, 0xfe, 0xc8, 0xf2, 0x4d, 0x06, 0xeb, 0x8c, 0x3c, 0xf7, 0xbe, 0xc0, 0x51, 0x15,
	0x5c, 0x1c, 0x54, 0xee, 0xc7, 0xe8, 0x38, 0xa5, 0x89, 0xbe, 0x0c, 0x68, 0x7a, 0x3f, 0xf5, 0x3a,
	0xbc, 0x70, 0xe4, 0x34, 0xa2, 0x6a, 0xba, 0x14, 0x56, 0x57, 0xbb, 0xe9, 0x02, 0x55, 0xff, 0x8a,
	0x28, 0xe9, 0xa6, 0xdc, 0x54, 0xff, 0xbd, 0x36, 0x21, 0x8c, 0xef, 0x12, 0x7a, 0x0c, 0x79, 0xda,
	0x8d, 0x2e, 0xb6, 0x5f, 0xcf, 0xce, 0x31, 0x9a, 0xdb, 0x4d, 0x19, 0xbe, 0x9a, 0xdb, 0x4d, 0xcc,
	0x21, 0x93, 0x65, 0xe4, 0x9e, 0xb1, 0x8c, 0xbf, 0x6b, 0x13, 0x16, 0x51, 0x52, 0xd0, 0x9f, 0x35,
	0x58, 0xa6, 0xbe, 0x3d, 0xe4, 0x4b, 0x23, 0xa3, 0xa0, 0x75, 0xa4, 0x46, 0x7d, 0x2b, 0xd3, 0x35,
	0x34, 0x67, 0x00, 0x37, 0x2a, 0xe3, 0xc3, 0xea, 0xf2, 0xac, 0x11, 0x3c, 0x53, 0x51, 0xfd, 0x36,
	0x5c, 0x3a, 0x99, 0xe4, 0x13, 0x54, 0x72, 0xff, 0x9d, 0x3c, 0x5f, 0x69, 0x8f, 0x43, 0x1f, 0xcc,
	0x28, 0xe1, 0x49, 0xf6, 0x9e, 0xfe, 0xfc, 0x2a, 0xfe, 0x37, 0xb3, 0xab, 0xf8, 0xcf, 0x48, 0xaf,
	0x63, 0x0a, 0xf9, 0xe3, 0xe3, 0x87, 0xfe, 0x6d, 0x58, 0x79, 0xb6, 0xfc, 0x13, 0x6c, 0xd8, 0x27,
	0x79, 0xd1, 0xdc, 0xa6, 0xd2, 0x3a, 0x6a, 0xc1, 0x05, 0xbb, 0xeb, 0x7a, 0x3e, 0xb9, 0xe7, 0xf6,
	0x5d, 0xef, 0x91, 0xbb, 0xe1, 0x0d, 0x06, 0xc4, 0x65, 0xf2, 0x89, 0xa7, 0xd4, 0xb8, 0xa8, 0xa4,
	0x5c, 0xd8, 0x99, 0xc5, 0x84, 0x67, 0xcf, 0x15, 0x97, 0x71, 0xcc, 0xb7, 0x2d, 0x26, 0x0c, 0x9c,
	0xaa, 0xc6, 0x5a, 0x82, 0x8a, 0xd5, 0x68, 0xea, 0xb5, 0x20, 0xff, 0x79, 0xbc, 0x16, 0xc4, 0x51,
	0xa0, 0x30, 0x3b, 0x0a, 0xa0, 0xaf, 0x43, 0xf9, 0xc0, 0x76, 0xc8, 0xae, 0xe9, 0xf7, 0x03, 0x51,
	0xd6, 0x96, 0xa5, 0x73, 0x6d, 0x45, 0x44, 0x9c, 0x8c, 0x1f, 0x0d, 0xee, 0xc5, 0x2f, 0x4c, 0x70,
	0x7f, 0x37, 0x0f, 0x8b, 0xdb, 0xc4, 0x25, 0xbe, 0x6d, 0xc9, 0xb7, 0x4b, 0xde, 0x76, 0x79, 0x6d,
	0xde, 0x42, 0x91, 0xce, 0xb6, 0x7c, 0xbb, 0xb6, 0x3d, 0x57, 0xec, 0x78, 0x3e, 0x69, 0xbb, 0x5e,
	0x9d, 0xe2, 0xc0, 0x33, 0x66, 0xa1, 0xf7, 0x34, 0x00, 0x2b, 0x7a, 0x1b, 0x0d, 0xd4, 0x95, 0xc4,
	0x29, 0x3f, 0x7f, 0xc4, 0x6f, 0xaf, 0xc9, 0x5a, 0x63, 0x52, 0x80, 0x53, 0xf0, 0x68, 0x17, 0x96,
	0x0e, 0x7c, 0x9b, 0xb8, 0x1d, 0x67, 0xb4, 0x49, 0x02, 0xcb, 0xb7, 0xc5, 0x23, 0x95, 0x3a, 0x52,
	0x5f, 0x55, 0x93, 0x97, 0xb6, 0xa6, 0x59, 0xf0, 0xac, 0x79, 0xdc, 0x50, 0x61, 0x40, 0x0e, 0x42,
	0xe7, 0xa6, 0xef, 0x7b, 0xfe, 0xee, 0xc4, 0xfb, 0x6d, 0x6c, 0xa8, 0x7b, 0x53, 0x1c, 0x78, 0xc6,
	0xac, 0x86, 0xf1, 0xe4, 0xe9, 0xea, 0x99, 0x8f, 0x9e, 0xae, 0x9e, 0xf9, 0xf8, 0xe9, 0xea, 0x99,
	0x1f, 0x8d, 0x57, 0xb5, 0x27, 0xe3, 0x55, 0xed, 0xa3, 0xf1, 0xaa, 0xf6, 0xf1, 0x78, 0x55, 0xfb,
	0xc7, 0x78, 0x55, 0x7b, 0xff, 0x9f, 0xab, 0x67, 0x5e, 0x2b, 0x45, 0xeb, 0xfe, 0x5f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x4b, 0x7e, 0xd4, 0xd8, 0xba, 0x21, 0x00, 0x00,
}

func (m *AppCluster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KubeconfigSecretRef != nil {
		{
			size, err := m.KubeconfigSecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.Namespace)
	copy(dAtA[i:], m.Namespace)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Namespace)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AppClusterKubeconfigSecretRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppClusterKubeconfigSecretRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppClusterKubeconfigSecretRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Key)
	copy(dAtA[i:], m.Key)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Key)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AppCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Message)
	copy(dAtA[i:], m.Message)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Message)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Status)
	copy(dAtA[i:], m.Status)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Status)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AppDeploy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppDeploy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppDeploy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Kapp != nil {
		{
			size, err := m.Kapp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppDeployKapp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppDeployKapp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppDeployKapp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Delete != nil {
		{
			size, err := m.Delete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Inspect != nil {
		{
			size, err := m.Inspect.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.RawOptions) > 0 {
		for iNdEx := len(m.RawOptions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RawOptions[iNdEx])
			copy(dAtA[i:], m.RawOptions[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.RawOptions[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.MapNs) > 0 {
		for iNdEx := len(m.MapNs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MapNs[iNdEx])
			copy(dAtA[i:], m.MapNs[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.MapNs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	i -= len(m.IntoNs)
	copy(dAtA[i:], m.IntoNs)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.IntoNs)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AppDeployKappDelete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppDeployKappDelete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppDeployKappDelete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RawOptions) > 0 {
		for iNdEx := len(m.RawOptions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RawOptions[iNdEx])
			copy(dAtA[i:], m.RawOptions[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.RawOptions[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AppDeployKappInspect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppDeployKappInspect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppDeployKappInspect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RawOptions) > 0 {
		for iNdEx := len(m.RawOptions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RawOptions[iNdEx])
			copy(dAtA[i:], m.RawOptions[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.RawOptions[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AppFetch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppFetch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppFetch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ImgpkgBundle != nil {
		{
			size, err := m.ImgpkgBundle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.HelmChart != nil {
		{
			size, err := m.HelmChart.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Git != nil {
		{
			size, err := m.Git.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.HTTP != nil {
		{
			size, err := m.HTTP.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Image != nil {
		{
			size, err := m.Image.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Inline != nil {
		{
			size, err := m.Inline.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppFetchGit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppFetchGit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppFetchGit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.LFSSkipSmudge {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	i -= len(m.SubPath)
	copy(dAtA[i:], m.SubPath)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SubPath)))
	i--
	dAtA[i] = 0x22
	if m.SecretRef != nil {
		{
			size, err := m.SecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	i -= len(m.Ref)
	copy(dAtA[i:], m.Ref)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Ref)))
	i--
	dAtA[i] = 0x12
	i -= len(m.URL)
	copy(dAtA[i:], m.URL)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.URL)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AppFetchHTTP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppFetchHTTP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppFetchHTTP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.SubPath)
	copy(dAtA[i:], m.SubPath)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SubPath)))
	i--
	dAtA[i] = 0x22
	if m.SecretRef != nil {
		{
			size, err := m.SecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	i -= len(m.SHA256)
	copy(dAtA[i:], m.SHA256)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SHA256)))
	i--
	dAtA[i] = 0x12
	i -= len(m.URL)
	copy(dAtA[i:], m.URL)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.URL)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AppFetchHelmChart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppFetchHelmChart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppFetchHelmChart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Repository != nil {
		{
			size, err := m.Repository.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	i -= len(m.Version)
	copy(dAtA[i:], m.Version)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Version)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AppFetchHelmChartRepo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppFetchHelmChartRepo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppFetchHelmChartRepo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SecretRef != nil {
		{
			size, err := m.SecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.URL)
	copy(dAtA[i:], m.URL)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.URL)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AppFetchImage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppFetchImage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppFetchImage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.SubPath)
	copy(dAtA[i:], m.SubPath)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SubPath)))
	i--
	dAtA[i] = 0x1a
	if m.SecretRef != nil {
		{
			size, err := m.SecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.URL)
	copy(dAtA[i:], m.URL)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.URL)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AppFetchImgpkgBundle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppFetchImgpkgBundle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppFetchImgpkgBundle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SecretRef != nil {
		{
			size, err := m.SecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.Image)
	copy(dAtA[i:], m.Image)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Image)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AppFetchInline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppFetchInline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppFetchInline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PathsFrom) > 0 {
		for iNdEx := len(m.PathsFrom) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PathsFrom[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Paths) > 0 {
		keysForPaths := make([]string, 0, len(m.Paths))
		for k := range m.Paths {
			keysForPaths = append(keysForPaths, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForPaths)
		for iNdEx := len(keysForPaths) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Paths[string(keysForPaths[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForPaths[iNdEx])
			copy(dAtA[i:], keysForPaths[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForPaths[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AppFetchInlineSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppFetchInlineSource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppFetchInlineSource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConfigMapRef != nil {
		{
			size, err := m.ConfigMapRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SecretRef != nil {
		{
			size, err := m.SecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppFetchInlineSourceRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppFetchInlineSourceRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppFetchInlineSourceRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.DirectoryPath)
	copy(dAtA[i:], m.DirectoryPath)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DirectoryPath)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AppFetchLocalRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppFetchLocalRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppFetchLocalRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AppSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.NoopDelete {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x48
	if m.SyncPeriod != nil {
		{
			size, err := m.SyncPeriod.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	i--
	if m.Canceled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	i--
	if m.Paused {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x30
	if len(m.Deploy) > 0 {
		for iNdEx := len(m.Deploy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deploy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Template) > 0 {
		for iNdEx := len(m.Template) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Template[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Fetch) > 0 {
		for iNdEx := len(m.Fetch) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fetch[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Cluster != nil {
		{
			size, err := m.Cluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.ServiceAccountName)
	copy(dAtA[i:], m.ServiceAccountName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ServiceAccountName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AppTemplate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppTemplate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppTemplate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sops != nil {
		{
			size, err := m.Sops.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Jsonnet != nil {
		{
			size, err := m.Jsonnet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Kustomize != nil {
		{
			size, err := m.Kustomize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.HelmTemplate != nil {
		{
			size, err := m.HelmTemplate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Kbld != nil {
		{
			size, err := m.Kbld.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Ytt != nil {
		{
			size, err := m.Ytt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppTemplateHelmTemplate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppTemplateHelmTemplate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppTemplateHelmTemplate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValuesFrom) > 0 {
		for iNdEx := len(m.ValuesFrom) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValuesFrom[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	i -= len(m.Path)
	copy(dAtA[i:], m.Path)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Path)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Namespace)
	copy(dAtA[i:], m.Namespace)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Namespace)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AppTemplateJsonnet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppTemplateJsonnet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppTemplateJsonnet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AppTemplateKbld) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppTemplateKbld) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppTemplateKbld) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Paths) > 0 {
		for iNdEx := len(m.Paths) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Paths[iNdEx])
			copy(dAtA[i:], m.Paths[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Paths[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AppTemplateKustomize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppTemplateKustomize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppTemplateKustomize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AppTemplateSops) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppTemplateSops) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppTemplateSops) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Paths) > 0 {
		for iNdEx := len(m.Paths) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Paths[iNdEx])
			copy(dAtA[i:], m.Paths[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Paths[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.PGP != nil {
		{
			size, err := m.PGP.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppTemplateSopsPGP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppTemplateSopsPGP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppTemplateSopsPGP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PrivateKeysSecretRef != nil {
		{
			size, err := m.PrivateKeysSecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppTemplateSopsPGPPrivateKeysSecretRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppTemplateSopsPGPPrivateKeysSecretRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppTemplateSopsPGPPrivateKeysSecretRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AppTemplateValuesSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppTemplateValuesSource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppTemplateValuesSource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Path)
	copy(dAtA[i:], m.Path)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Path)))
	i--
	dAtA[i] = 0x1a
	if m.ConfigMapRef != nil {
		{
			size, err := m.ConfigMapRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SecretRef != nil {
		{
			size, err := m.SecretRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppTemplateValuesSourceRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppTemplateValuesSourceRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppTemplateValuesSourceRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AppTemplateYtt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppTemplateYtt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppTemplateYtt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValuesFrom) > 0 {
		for iNdEx := len(m.ValuesFrom) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValuesFrom[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.FileMarks) > 0 {
		for iNdEx := len(m.FileMarks) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FileMarks[iNdEx])
			copy(dAtA[i:], m.FileMarks[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.FileMarks[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Paths) > 0 {
		for iNdEx := len(m.Paths) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Paths[iNdEx])
			copy(dAtA[i:], m.Paths[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Paths[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Inline != nil {
		{
			size, err := m.Inline.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	i--
	if m.Strict {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i--
	if m.IgnoreUnknownComments {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GenericStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenericStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenericStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.UsefulErrorMessage)
	copy(dAtA[i:], m.UsefulErrorMessage)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.UsefulErrorMessage)))
	i--
	dAtA[i] = 0x22
	i -= len(m.FriendlyDescription)
	copy(dAtA[i:], m.FriendlyDescription)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FriendlyDescription)))
	i--
	dAtA[i] = 0x1a
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObservedGeneration))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenerated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AppCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	n += 1 + l + sovGenerated(uint64(l))
	if m.KubeconfigSecretRef != nil {
		l = m.KubeconfigSecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *AppClusterKubeconfigSecretRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Key)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AppCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Status)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Reason)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Message)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AppDeploy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kapp != nil {
		l = m.Kapp.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *AppDeployKapp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IntoNs)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.MapNs) > 0 {
		for _, s := range m.MapNs {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.RawOptions) > 0 {
		for _, s := range m.RawOptions {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.Inspect != nil {
		l = m.Inspect.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Delete != nil {
		l = m.Delete.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *AppDeployKappDelete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RawOptions) > 0 {
		for _, s := range m.RawOptions {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *AppDeployKappInspect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RawOptions) > 0 {
		for _, s := range m.RawOptions {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *AppFetch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Inline != nil {
		l = m.Inline.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Image != nil {
		l = m.Image.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.HTTP != nil {
		l = m.HTTP.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Git != nil {
		l = m.Git.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.HelmChart != nil {
		l = m.HelmChart.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ImgpkgBundle != nil {
		l = m.ImgpkgBundle.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *AppFetchGit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.URL)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Ref)
	n += 1 + l + sovGenerated(uint64(l))
	if m.SecretRef != nil {
		l = m.SecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.SubPath)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	return n
}

func (m *AppFetchHTTP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.URL)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.SHA256)
	n += 1 + l + sovGenerated(uint64(l))
	if m.SecretRef != nil {
		l = m.SecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.SubPath)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AppFetchHelmChart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Version)
	n += 1 + l + sovGenerated(uint64(l))
	if m.Repository != nil {
		l = m.Repository.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *AppFetchHelmChartRepo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.URL)
	n += 1 + l + sovGenerated(uint64(l))
	if m.SecretRef != nil {
		l = m.SecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *AppFetchImage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.URL)
	n += 1 + l + sovGenerated(uint64(l))
	if m.SecretRef != nil {
		l = m.SecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.SubPath)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AppFetchImgpkgBundle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Image)
	n += 1 + l + sovGenerated(uint64(l))
	if m.SecretRef != nil {
		l = m.SecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *AppFetchInline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Paths) > 0 {
		for k, v := range m.Paths {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if len(m.PathsFrom) > 0 {
		for _, e := range m.PathsFrom {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *AppFetchInlineSource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SecretRef != nil {
		l = m.SecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ConfigMapRef != nil {
		l = m.ConfigMapRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *AppFetchInlineSourceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DirectoryPath)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AppFetchLocalRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AppSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceAccountName)
	n += 1 + l + sovGenerated(uint64(l))
	if m.Cluster != nil {
		l = m.Cluster.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Fetch) > 0 {
		for _, e := range m.Fetch {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Template) > 0 {
		for _, e := range m.Template {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Deploy) > 0 {
		for _, e := range m.Deploy {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	n += 2
	n += 2
	if m.SyncPeriod != nil {
		l = m.SyncPeriod.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	n += 2
	return n
}

func (m *AppTemplate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ytt != nil {
		l = m.Ytt.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Kbld != nil {
		l = m.Kbld.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.HelmTemplate != nil {
		l = m.HelmTemplate.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Kustomize != nil {
		l = m.Kustomize.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Jsonnet != nil {
		l = m.Jsonnet.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Sops != nil {
		l = m.Sops.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *AppTemplateHelmTemplate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Namespace)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Path)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.ValuesFrom) > 0 {
		for _, e := range m.ValuesFrom {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *AppTemplateJsonnet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AppTemplateKbld) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Paths) > 0 {
		for _, s := range m.Paths {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *AppTemplateKustomize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AppTemplateSops) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PGP != nil {
		l = m.PGP.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Paths) > 0 {
		for _, s := range m.Paths {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *AppTemplateSopsPGP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrivateKeysSecretRef != nil {
		l = m.PrivateKeysSecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *AppTemplateSopsPGPPrivateKeysSecretRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AppTemplateValuesSource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SecretRef != nil {
		l = m.SecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.ConfigMapRef != nil {
		l = m.ConfigMapRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.Path)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AppTemplateValuesSourceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AppTemplateYtt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	n += 2
	if m.Inline != nil {
		l = m.Inline.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Paths) > 0 {
		for _, s := range m.Paths {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.FileMarks) > 0 {
		for _, s := range m.FileMarks {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.ValuesFrom) > 0 {
		for _, e := range m.ValuesFrom {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *GenericStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.ObservedGeneration))
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.FriendlyDescription)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.UsefulErrorMessage)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func sovGenerated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AppCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppCluster{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`KubeconfigSecretRef:` + strings.Replace(this.KubeconfigSecretRef.String(), "AppClusterKubeconfigSecretRef", "AppClusterKubeconfigSecretRef", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppClusterKubeconfigSecretRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppClusterKubeconfigSecretRef{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppCondition{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppDeploy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppDeploy{`,
		`Kapp:` + strings.Replace(this.Kapp.String(), "AppDeployKapp", "AppDeployKapp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppDeployKapp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppDeployKapp{`,
		`IntoNs:` + fmt.Sprintf("%v", this.IntoNs) + `,`,
		`MapNs:` + fmt.Sprintf("%v", this.MapNs) + `,`,
		`RawOptions:` + fmt.Sprintf("%v", this.RawOptions) + `,`,
		`Inspect:` + strings.Replace(this.Inspect.String(), "AppDeployKappInspect", "AppDeployKappInspect", 1) + `,`,
		`Delete:` + strings.Replace(this.Delete.String(), "AppDeployKappDelete", "AppDeployKappDelete", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppDeployKappDelete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppDeployKappDelete{`,
		`RawOptions:` + fmt.Sprintf("%v", this.RawOptions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppDeployKappInspect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppDeployKappInspect{`,
		`RawOptions:` + fmt.Sprintf("%v", this.RawOptions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppFetch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppFetch{`,
		`Inline:` + strings.Replace(this.Inline.String(), "AppFetchInline", "AppFetchInline", 1) + `,`,
		`Image:` + strings.Replace(this.Image.String(), "AppFetchImage", "AppFetchImage", 1) + `,`,
		`HTTP:` + strings.Replace(this.HTTP.String(), "AppFetchHTTP", "AppFetchHTTP", 1) + `,`,
		`Git:` + strings.Replace(this.Git.String(), "AppFetchGit", "AppFetchGit", 1) + `,`,
		`HelmChart:` + strings.Replace(this.HelmChart.String(), "AppFetchHelmChart", "AppFetchHelmChart", 1) + `,`,
		`ImgpkgBundle:` + strings.Replace(this.ImgpkgBundle.String(), "AppFetchImgpkgBundle", "AppFetchImgpkgBundle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppFetchGit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppFetchGit{`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`Ref:` + fmt.Sprintf("%v", this.Ref) + `,`,
		`SecretRef:` + strings.Replace(this.SecretRef.String(), "AppFetchLocalRef", "AppFetchLocalRef", 1) + `,`,
		`SubPath:` + fmt.Sprintf("%v", this.SubPath) + `,`,
		`LFSSkipSmudge:` + fmt.Sprintf("%v", this.LFSSkipSmudge) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppFetchHTTP) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppFetchHTTP{`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`SHA256:` + fmt.Sprintf("%v", this.SHA256) + `,`,
		`SecretRef:` + strings.Replace(this.SecretRef.String(), "AppFetchLocalRef", "AppFetchLocalRef", 1) + `,`,
		`SubPath:` + fmt.Sprintf("%v", this.SubPath) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppFetchHelmChart) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppFetchHelmChart{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Repository:` + strings.Replace(this.Repository.String(), "AppFetchHelmChartRepo", "AppFetchHelmChartRepo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppFetchHelmChartRepo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppFetchHelmChartRepo{`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`SecretRef:` + strings.Replace(this.SecretRef.String(), "AppFetchLocalRef", "AppFetchLocalRef", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppFetchImage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppFetchImage{`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`SecretRef:` + strings.Replace(this.SecretRef.String(), "AppFetchLocalRef", "AppFetchLocalRef", 1) + `,`,
		`SubPath:` + fmt.Sprintf("%v", this.SubPath) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppFetchImgpkgBundle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppFetchImgpkgBundle{`,
		`Image:` + fmt.Sprintf("%v", this.Image) + `,`,
		`SecretRef:` + strings.Replace(this.SecretRef.String(), "AppFetchLocalRef", "AppFetchLocalRef", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppFetchInline) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPathsFrom := "[]AppFetchInlineSource{"
	for _, f := range this.PathsFrom {
		repeatedStringForPathsFrom += strings.Replace(strings.Replace(f.String(), "AppFetchInlineSource", "AppFetchInlineSource", 1), `&`, ``, 1) + ","
	}
	repeatedStringForPathsFrom += "}"
	keysForPaths := make([]string, 0, len(this.Paths))
	for k := range this.Paths {
		keysForPaths = append(keysForPaths, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForPaths)
	mapStringForPaths := "map[string]string{"
	for _, k := range keysForPaths {
		mapStringForPaths += fmt.Sprintf("%v: %v,", k, this.Paths[k])
	}
	mapStringForPaths += "}"
	s := strings.Join([]string{`&AppFetchInline{`,
		`Paths:` + mapStringForPaths + `,`,
		`PathsFrom:` + repeatedStringForPathsFrom + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppFetchInlineSource) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppFetchInlineSource{`,
		`SecretRef:` + strings.Replace(this.SecretRef.String(), "AppFetchInlineSourceRef", "AppFetchInlineSourceRef", 1) + `,`,
		`ConfigMapRef:` + strings.Replace(this.ConfigMapRef.String(), "AppFetchInlineSourceRef", "AppFetchInlineSourceRef", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppFetchInlineSourceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppFetchInlineSourceRef{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`DirectoryPath:` + fmt.Sprintf("%v", this.DirectoryPath) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppFetchLocalRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppFetchLocalRef{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFetch := "[]AppFetch{"
	for _, f := range this.Fetch {
		repeatedStringForFetch += strings.Replace(strings.Replace(f.String(), "AppFetch", "AppFetch", 1), `&`, ``, 1) + ","
	}
	repeatedStringForFetch += "}"
	repeatedStringForTemplate := "[]AppTemplate{"
	for _, f := range this.Template {
		repeatedStringForTemplate += strings.Replace(strings.Replace(f.String(), "AppTemplate", "AppTemplate", 1), `&`, ``, 1) + ","
	}
	repeatedStringForTemplate += "}"
	repeatedStringForDeploy := "[]AppDeploy{"
	for _, f := range this.Deploy {
		repeatedStringForDeploy += strings.Replace(strings.Replace(f.String(), "AppDeploy", "AppDeploy", 1), `&`, ``, 1) + ","
	}
	repeatedStringForDeploy += "}"
	s := strings.Join([]string{`&AppSpec{`,
		`ServiceAccountName:` + fmt.Sprintf("%v", this.ServiceAccountName) + `,`,
		`Cluster:` + strings.Replace(this.Cluster.String(), "AppCluster", "AppCluster", 1) + `,`,
		`Fetch:` + repeatedStringForFetch + `,`,
		`Template:` + repeatedStringForTemplate + `,`,
		`Deploy:` + repeatedStringForDeploy + `,`,
		`Paused:` + fmt.Sprintf("%v", this.Paused) + `,`,
		`Canceled:` + fmt.Sprintf("%v", this.Canceled) + `,`,
		`SyncPeriod:` + strings.Replace(fmt.Sprintf("%v", this.SyncPeriod), "Duration", "v1.Duration", 1) + `,`,
		`NoopDelete:` + fmt.Sprintf("%v", this.NoopDelete) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppTemplate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppTemplate{`,
		`Ytt:` + strings.Replace(this.Ytt.String(), "AppTemplateYtt", "AppTemplateYtt", 1) + `,`,
		`Kbld:` + strings.Replace(this.Kbld.String(), "AppTemplateKbld", "AppTemplateKbld", 1) + `,`,
		`HelmTemplate:` + strings.Replace(this.HelmTemplate.String(), "AppTemplateHelmTemplate", "AppTemplateHelmTemplate", 1) + `,`,
		`Kustomize:` + strings.Replace(this.Kustomize.String(), "AppTemplateKustomize", "AppTemplateKustomize", 1) + `,`,
		`Jsonnet:` + strings.Replace(this.Jsonnet.String(), "AppTemplateJsonnet", "AppTemplateJsonnet", 1) + `,`,
		`Sops:` + strings.Replace(this.Sops.String(), "AppTemplateSops", "AppTemplateSops", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppTemplateHelmTemplate) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForValuesFrom := "[]AppTemplateValuesSource{"
	for _, f := range this.ValuesFrom {
		repeatedStringForValuesFrom += strings.Replace(strings.Replace(f.String(), "AppTemplateValuesSource", "AppTemplateValuesSource", 1), `&`, ``, 1) + ","
	}
	repeatedStringForValuesFrom += "}"
	s := strings.Join([]string{`&AppTemplateHelmTemplate{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`ValuesFrom:` + repeatedStringForValuesFrom + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppTemplateJsonnet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppTemplateJsonnet{`,
		`}`,
	}, "")
	return s
}
func (this *AppTemplateKbld) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppTemplateKbld{`,
		`Paths:` + fmt.Sprintf("%v", this.Paths) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppTemplateKustomize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppTemplateKustomize{`,
		`}`,
	}, "")
	return s
}
func (this *AppTemplateSops) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppTemplateSops{`,
		`PGP:` + strings.Replace(this.PGP.String(), "AppTemplateSopsPGP", "AppTemplateSopsPGP", 1) + `,`,
		`Paths:` + fmt.Sprintf("%v", this.Paths) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppTemplateSopsPGP) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppTemplateSopsPGP{`,
		`PrivateKeysSecretRef:` + strings.Replace(this.PrivateKeysSecretRef.String(), "AppTemplateSopsPGPPrivateKeysSecretRef", "AppTemplateSopsPGPPrivateKeysSecretRef", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppTemplateSopsPGPPrivateKeysSecretRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppTemplateSopsPGPPrivateKeysSecretRef{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppTemplateValuesSource) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppTemplateValuesSource{`,
		`SecretRef:` + strings.Replace(this.SecretRef.String(), "AppTemplateValuesSourceRef", "AppTemplateValuesSourceRef", 1) + `,`,
		`ConfigMapRef:` + strings.Replace(this.ConfigMapRef.String(), "AppTemplateValuesSourceRef", "AppTemplateValuesSourceRef", 1) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppTemplateValuesSourceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppTemplateValuesSourceRef{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppTemplateYtt) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForValuesFrom := "[]AppTemplateValuesSource{"
	for _, f := range this.ValuesFrom {
		repeatedStringForValuesFrom += strings.Replace(strings.Replace(f.String(), "AppTemplateValuesSource", "AppTemplateValuesSource", 1), `&`, ``, 1) + ","
	}
	repeatedStringForValuesFrom += "}"
	s := strings.Join([]string{`&AppTemplateYtt{`,
		`IgnoreUnknownComments:` + fmt.Sprintf("%v", this.IgnoreUnknownComments) + `,`,
		`Strict:` + fmt.Sprintf("%v", this.Strict) + `,`,
		`Inline:` + strings.Replace(this.Inline.String(), "AppFetchInline", "AppFetchInline", 1) + `,`,
		`Paths:` + fmt.Sprintf("%v", this.Paths) + `,`,
		`FileMarks:` + fmt.Sprintf("%v", this.FileMarks) + `,`,
		`ValuesFrom:` + repeatedStringForValuesFrom + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenericStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConditions := "[]AppCondition{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += strings.Replace(strings.Replace(f.String(), "AppCondition", "AppCondition", 1), `&`, ``, 1) + ","
	}
	repeatedStringForConditions += "}"
	s := strings.Join([]string{`&GenericStatus{`,
		`ObservedGeneration:` + fmt.Sprintf("%v", this.ObservedGeneration) + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`FriendlyDescription:` + fmt.Sprintf("%v", this.FriendlyDescription) + `,`,
		`UsefulErrorMessage:` + fmt.Sprintf("%v", this.UsefulErrorMessage) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AppCluster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppCluster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppCluster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeconfigSecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KubeconfigSecretRef == nil {
				m.KubeconfigSecretRef = &AppClusterKubeconfigSecretRef{}
			}
			if err := m.KubeconfigSecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppClusterKubeconfigSecretRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppClusterKubeconfigSecretRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppClusterKubeconfigSecretRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = AppConditionType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = k8s_io_api_core_v1.ConditionStatus(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppDeploy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppDeploy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppDeploy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kapp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Kapp == nil {
				m.Kapp = &AppDeployKapp{}
			}
			if err := m.Kapp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppDeployKapp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppDeployKapp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppDeployKapp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntoNs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntoNs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapNs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapNs = append(m.MapNs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawOptions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawOptions = append(m.RawOptions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inspect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inspect == nil {
				m.Inspect = &AppDeployKappInspect{}
			}
			if err := m.Inspect.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Delete == nil {
				m.Delete = &AppDeployKappDelete{}
			}
			if err := m.Delete.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppDeployKappDelete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppDeployKappDelete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppDeployKappDelete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawOptions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawOptions = append(m.RawOptions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppDeployKappInspect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppDeployKappInspect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppDeployKappInspect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawOptions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawOptions = append(m.RawOptions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppFetch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppFetch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppFetch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inline == nil {
				m.Inline = &AppFetchInline{}
			}
			if err := m.Inline.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Image == nil {
				m.Image = &AppFetchImage{}
			}
			if err := m.Image.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HTTP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HTTP == nil {
				m.HTTP = &AppFetchHTTP{}
			}
			if err := m.HTTP.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Git", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Git == nil {
				m.Git = &AppFetchGit{}
			}
			if err := m.Git.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelmChart", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HelmChart == nil {
				m.HelmChart = &AppFetchHelmChart{}
			}
			if err := m.HelmChart.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgpkgBundle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImgpkgBundle == nil {
				m.ImgpkgBundle = &AppFetchImgpkgBundle{}
			}
			if err := m.ImgpkgBundle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppFetchGit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppFetchGit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppFetchGit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ref", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ref = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretRef == nil {
				m.SecretRef = &AppFetchLocalRef{}
			}
			if err := m.SecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LFSSkipSmudge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LFSSkipSmudge = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppFetchHTTP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppFetchHTTP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppFetchHTTP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SHA256", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SHA256 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretRef == nil {
				m.SecretRef = &AppFetchLocalRef{}
			}
			if err := m.SecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppFetchHelmChart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppFetchHelmChart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppFetchHelmChart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repository", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Repository == nil {
				m.Repository = &AppFetchHelmChartRepo{}
			}
			if err := m.Repository.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppFetchHelmChartRepo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppFetchHelmChartRepo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppFetchHelmChartRepo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretRef == nil {
				m.SecretRef = &AppFetchLocalRef{}
			}
			if err := m.SecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppFetchImage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppFetchImage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppFetchImage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretRef == nil {
				m.SecretRef = &AppFetchLocalRef{}
			}
			if err := m.SecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppFetchImgpkgBundle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppFetchImgpkgBundle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppFetchImgpkgBundle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretRef == nil {
				m.SecretRef = &AppFetchLocalRef{}
			}
			if err := m.SecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppFetchInline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppFetchInline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppFetchInline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paths == nil {
				m.Paths = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Paths[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathsFrom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathsFrom = append(m.PathsFrom, AppFetchInlineSource{})
			if err := m.PathsFrom[len(m.PathsFrom)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppFetchInlineSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppFetchInlineSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppFetchInlineSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretRef == nil {
				m.SecretRef = &AppFetchInlineSourceRef{}
			}
			if err := m.SecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigMapRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigMapRef == nil {
				m.ConfigMapRef = &AppFetchInlineSourceRef{}
			}
			if err := m.ConfigMapRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppFetchInlineSourceRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppFetchInlineSourceRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppFetchInlineSourceRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectoryPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DirectoryPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppFetchLocalRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppFetchLocalRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppFetchLocalRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAccountName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAccountName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cluster == nil {
				m.Cluster = &AppCluster{}
			}
			if err := m.Cluster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fetch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fetch = append(m.Fetch, AppFetch{})
			if err := m.Fetch[len(m.Fetch)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Template", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Template = append(m.Template, AppTemplate{})
			if err := m.Template[len(m.Template)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deploy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deploy = append(m.Deploy, AppDeploy{})
			if err := m.Deploy[len(m.Deploy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Paused = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Canceled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Canceled = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SyncPeriod == nil {
				m.SyncPeriod = &v1.Duration{}
			}
			if err := m.SyncPeriod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoopDelete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoopDelete = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppTemplate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppTemplate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppTemplate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ytt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ytt == nil {
				m.Ytt = &AppTemplateYtt{}
			}
			if err := m.Ytt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kbld", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Kbld == nil {
				m.Kbld = &AppTemplateKbld{}
			}
			if err := m.Kbld.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelmTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HelmTemplate == nil {
				m.HelmTemplate = &AppTemplateHelmTemplate{}
			}
			if err := m.HelmTemplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kustomize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Kustomize == nil {
				m.Kustomize = &AppTemplateKustomize{}
			}
			if err := m.Kustomize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jsonnet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Jsonnet == nil {
				m.Jsonnet = &AppTemplateJsonnet{}
			}
			if err := m.Jsonnet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sops", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sops == nil {
				m.Sops = &AppTemplateSops{}
			}
			if err := m.Sops.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppTemplateHelmTemplate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppTemplateHelmTemplate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppTemplateHelmTemplate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValuesFrom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValuesFrom = append(m.ValuesFrom, AppTemplateValuesSource{})
			if err := m.ValuesFrom[len(m.ValuesFrom)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppTemplateJsonnet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppTemplateJsonnet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppTemplateJsonnet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppTemplateKbld) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppTemplateKbld: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppTemplateKbld: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paths", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Paths = append(m.Paths, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppTemplateKustomize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppTemplateKustomize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppTemplateKustomize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppTemplateSops) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppTemplateSops: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppTemplateSops: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PGP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PGP == nil {
				m.PGP = &AppTemplateSopsPGP{}
			}
			if err := m.PGP.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paths", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Paths = append(m.Paths, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppTemplateSopsPGP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppTemplateSopsPGP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppTemplateSopsPGP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKeysSecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrivateKeysSecretRef == nil {
				m.PrivateKeysSecretRef = &AppTemplateSopsPGPPrivateKeysSecretRef{}
			}
			if err := m.PrivateKeysSecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppTemplateSopsPGPPrivateKeysSecretRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppTemplateSopsPGPPrivateKeysSecretRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppTemplateSopsPGPPrivateKeysSecretRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppTemplateValuesSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppTemplateValuesSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppTemplateValuesSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretRef == nil {
				m.SecretRef = &AppTemplateValuesSourceRef{}
			}
			if err := m.SecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigMapRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigMapRef == nil {
				m.ConfigMapRef = &AppTemplateValuesSourceRef{}
			}
			if err := m.ConfigMapRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppTemplateValuesSourceRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppTemplateValuesSourceRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppTemplateValuesSourceRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppTemplateYtt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppTemplateYtt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppTemplateYtt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoreUnknownComments", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IgnoreUnknownComments = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strict", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Strict = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inline == nil {
				m.Inline = &AppFetchInline{}
			}
			if err := m.Inline.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paths", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Paths = append(m.Paths, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileMarks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileMarks = append(m.FileMarks, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValuesFrom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValuesFrom = append(m.ValuesFrom, AppTemplateValuesSource{})
			if err := m.ValuesFrom[len(m.ValuesFrom)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenericStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenericStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenericStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedGeneration", wireType)
			}
			m.ObservedGeneration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedGeneration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, AppCondition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendlyDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FriendlyDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsefulErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsefulErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGenerated(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthGenerated
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGenerated = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated   = fmt.Errorf("proto: integer overflow")
)
