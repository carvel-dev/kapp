name: kapp-release

on:
  push:
    tags:
      - "v*"

jobs:
  kappreleaser:
    name: kapp release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.19.6

      - name: Build kapp Script
        run: |
          ./hack/build-binaries.sh
          shasum -a 256 ./kapp-* | tee checksums.txt
          echo "# :open_file_folder: Files Checksum" | tee checksums-formatted.txt
          echo \`\`\` | tee -a checksums-formatted.txt
          cat checksums.txt | tee -a checksums-formatted.txt
          echo \`\`\` | tee -a checksums-formatted.txt

      - name: Setup Minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          install minikube-linux-amd64 /usr/local/bin/minikube
          minikube start --driver=docker --memory 4096
          eval $(minikube docker-env --shell=bash)

          # Ensure that there is no existing kapp installed
          rm -f /tmp/bin/kapp

      - name: Add kapp binary to the Path
        run: |
          mkdir bin
          mv kapp bin
          echo "$PWD/bin" >> $GITHUB_PATH
          echo $GITHUB_PATH

      - name: Run test cases
        run: |
          ./hack/test-external.sh

      - name: Upload binaries and create draft Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ github.ref_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body_path: ./checksums-formatted.txt
          files: |
            kapp-*
            checksums.txt
          draft: true
          prerelease: true

      - name: Get uploaded release YAML checksum
        uses: actions/github-script@v4
        id: get-checksums-from-draft-release
        if: startsWith(github.ref, 'refs/tags/')
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            var crypto = require('crypto');
            const { owner, repo } = context.repo;
            // https://docs.github.com/en/rest/reference/repos#list-releases
            // https://octokit.github.io/rest.js/v18#repos-list-releases
            var releases = await github.repos.listReleases({
              owner: owner,
              repo: repo
            });
            var crypto = require('crypto')
            var fs = require('fs')
            const url = require('url');
            const https = require('https');
            checksums = {}
            for (const r of releases["data"]) {
              if (r.draft && `refs/tags/${r.tag_name}` == "${{ github.ref }}") {
                for (const asset of r.assets) {
                  var release_asset = await github.repos.getReleaseAsset({ headers: {accept: `application/octet-stream`}, accept: `application/octet-stream`, owner: owner, repo: repo, asset_id: asset.id });
                  const hash = crypto.createHash('sha256');
                  let http_promise = new Promise((resolve, reject) => {
                    https.get(release_asset.url, (stream) => {
                      stream.on('data', function (data) {
                        hash.update(data);
                      });
                      stream.on('end', function () {
                        checksums[asset.name]= hash.digest('hex');
                        resolve(`${asset.name}`);
                      });
                    });
                  });
                  await http_promise;
                }
              }
            }
            console.log(checksums)
            return `${checksums['kapp-darwin-amd64']}  ./kapp-darwin-amd64
            ${checksums['kapp-darwin-arm64']}  ./kapp-darwin-arm64
            ${checksums['kapp-linux-amd64']}  ./kapp-linux-amd64
            ${checksums['kapp-linux-arm64']}  ./kapp-linux-arm64
            ${checksums['kapp-windows-amd64.exe']}  ./kapp-windows-amd64.exe`

      - name: verify uploaded artifacts
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          set -e -x
          cat ./checksums.txt
          diff ./checksums.txt <(cat <<EOF
          ${{steps.get-checksums-from-draft-release.outputs.result}}
          EOF
          )
          